{
  "hash": "d37137be504167a9bf2eddc69bb25606",
  "result": {
    "engine": "jupyter",
    "markdown": "# Anpassung und Gestaltung von Plots in Matplotlib\n\nEin gut gestaltetes Diagramm verbessert die Lesbarkeit und Verständlichkeit der dargestellten Daten. In diesem Kapitel werden wir verschiedene Möglichkeiten zur Anpassung und Gestaltung von Plots in Matplotlib erkunden.\n\n## 1. Achsentitel und Diagrammtitel\nKlare Achsen- und Diagrammtitel sind essenziell für die Verständlichkeit eines Plots.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)', fontsize=12)\nplt.ylabel('Amplitude', fontsize=12)\nplt.title('Liniendiagramm mit Beschriftung', fontsize=14)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](adapting_plots_files/figure-pdf/cell-2-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 2. Anpassung der Achsen\nDie Skalierung der Achsen sollte sinnvoll gewählt werden, um die Daten bestmöglich darzustellen.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.xlim(0, 10)\nplt.ylim(-1.2, 1.2)\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.title('Liniendiagramm mit angepassten Achsen')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](adapting_plots_files/figure-pdf/cell-3-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 3. Farben und Linienstile\nFarben und Linienstile helfen dabei, wichtige Informationen im Plot hervorzuheben.\n\n### Wichtige Farben (Standardfarben in Matplotlib)\n| Farbe      | Kürzel | Beschreibung      |\n|------------|--------|-------------------|\n| Blau       | 'b'    | blue              |\n| Grün       | 'g'    | green             |\n| Rot        | 'r'    | red               |\n| Cyan       | 'c'    | cyan              |\n| Magenta    | 'm'    | magenta           |\n| Gelb       | 'y'    | yellow            |\n| Schwarz    | 'k'    | black             |\n| Weiß       | 'w'    | white             |\n\n### Wichtige Linienstile\n| Linienstil    | Kürzel  | Beschreibung           |\n|---------------|---------|------------------------|\n| Durchgezogen  | '-'     | Standardlinie          |\n| Gestrichelt   | '--'    | lange Striche          |\n| Gepunktet     | ':'     | nur Punkte             |\n| Strich-Punkt  | '-.'    | abwechselnd Strich-Punkt |\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.plot(t, np.sin(t), linestyle='-', color='r', label='sin(t)')\nplt.plot(t, np.cos(t), linestyle='--', color='g', label='cos(t)')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('Anpassung von Farben und Linienstilen')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](adapting_plots_files/figure-pdf/cell-4-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 4. Mehrere Plots mit Subplots\nManchmal ist es sinnvoll, mehrere Diagramme in einer Abbildung darzustellen.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 1, figsize=(6, 6))\naxs[0].plot(t, np.sin(t), color='b')\naxs[0].set_title('Sinusfunktion')\naxs[1].plot(t, np.cos(t), color='r')\naxs[1].set_title('Kosinusfunktion')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](adapting_plots_files/figure-pdf/cell-5-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 5. Speichern von Plots\nMan kann Diagramme in verschiedenen Formaten speichern.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('Speicherung eines Plots')\nplt.legend()\nplt.savefig('mein_plot.png', dpi=300)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](adapting_plots_files/figure-pdf/cell-6-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## Fazit\nDurch geschickte Anpassungen lassen sich wissenschaftliche Plots deutlich verbessern. Im nächsten Kapitel werden wir uns mit erweiterten Techniken wie logarithmischen Skalen und Annotationen beschäftigen.\n\n",
    "supporting": [
      "adapting_plots_files/figure-pdf"
    ],
    "filters": []
  }
}