{
  "hash": "759a1d3f163c8bf90642621d59211e02",
  "result": {
    "engine": "jupyter",
    "markdown": "# Plot Types in Matplotlib\n\nMatplotlib offers a variety of plot types suitable for different purposes. In this chapter, we introduce the most important plot types and explain their use cases.\n\n## 1. Line plots (`plt.plot()`)\nLine plots are excellent for visualizing trends over time.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Line plot')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-2-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 2. Scatter Plots (`plt.scatter()`)\nScatter plots are used to show relationships between two variables.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nx = np.random.rand(50)\ny = np.random.rand(50)\n\nplt.scatter(x, y, color='r', alpha=0.5)\nplt.xlabel('Variable X')\nplt.ylabel('Variable Y')\nplt.title('Scatter Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-3-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 3. Bar plots (`plt.bar()`)\nBar plots are suitable for representing categorical data.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncategories = ['A', 'B', 'C', 'D']\nvalues = [3, 7, 1, 5]\n\nplt.bar(categories, values, color='g')\nplt.xlabel('Categories')\nplt.ylabel('Value')\nplt.title('Bar plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-4-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 4. Histograms (`plt.hist()`)\nHistograms show the distribution of numerical data.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndata = np.random.randn(1000)\nplt.hist(data, bins=30, color='purple', alpha=0.7)\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-5-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 5. Box Plots (`plt.boxplot()`)\nBox plots help visualize outliers and data distribution.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata = [np.random.randn(100) for _ in range(4)]\nplt.boxplot(data, labels=['A', 'B', 'C', 'D'])\nplt.ylabel('Value')\nplt.title('Box Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_3895/3930898833.py:2: MatplotlibDeprecationWarning: The 'labels' parameter of boxplot() has been renamed 'tick_labels' since Matplotlib 3.9; support for the old name will be dropped in 3.11.\n  plt.boxplot(data, labels=['A', 'B', 'C', 'D'])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-6-output-2.png){fig-pos='H'}\n:::\n:::\n\n\n## 6. Heatmaps (`plt.imshow()`)\nHeatmaps are useful for displaying 2D data.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndata = np.random.rand(10, 10)\nplt.imshow(data, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\nplt.title('Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-7-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## Conclusion\nThe choice of plot type depends on the nature of the data and the intended representation. In the next chapter, we will explore customizing and adapting plots.\n\n",
    "supporting": [
      "basic_plot_types_files/figure-pdf"
    ],
    "filters": []
  }
}