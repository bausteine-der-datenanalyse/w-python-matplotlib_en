# Best Practices in Matplotlib: Common Mistakes and Improvements

In this chapter, we demonstrate a poor and an improved example for each common issue encountered when plotting with Matplotlib.

## 1. Missing Labels
### ❌ Bad Example
```{python}
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y)
plt.show()
```

### ✅ Improved Example
```{python}
plt.plot(x, y, label='sin(x)', color='b')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Sine Curve')
plt.legend()
plt.show()
```

## 2. Poor Color Choice
### ❌ Bad Example
```{python}
plt.plot(x, y, color='yellow')
plt.show()
```

### ✅ Improved Example
```{python}
plt.plot(x, y, color='darkblue')
plt.grid(True, linestyle='--', alpha=0.7)
plt.title('Good Contrast for Better Readability')
plt.show()
```

## 3. Unreasonable Axis Scaling
### ❌ Bad Example
```{python}
plt.plot(x, y)
plt.ylim(0.5, 1)
plt.show()
```

### ✅ Improved Example
```{python}
plt.plot(x, y)
plt.ylim(-1.2, 1.2)
plt.xlim(0, 10)
plt.grid(True)
plt.title('Reasonable Axis Scaling')
plt.show()
```

## 4. Overcrowded with Too Many Lines
### ❌ Bad Example
```{python}
for i in range(10):
    plt.plot(x, np.sin(x + i * 0.2))
plt.show()
```

### ✅ Improved Example
```{python}
plt.plot(x, np.sin(x), label='sin(x)')
plt.plot(x, np.cos(x), label='cos(x)')
plt.legend()
plt.title('Less is More: Reduced Information Density')
plt.grid(True)
plt.show()
```

## Conclusion
Good plots are characterized by clear labels, good readability, and a reasonable amount of information.
