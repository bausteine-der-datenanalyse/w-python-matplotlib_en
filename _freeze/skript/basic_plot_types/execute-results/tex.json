{
  "hash": "f76eeafb99402f84a53e40e6439ca09f",
  "result": {
    "engine": "jupyter",
    "markdown": "# Diagrammtypen in Matplotlib\n\nMatplotlib bietet eine Vielzahl von Diagrammtypen, die für unterschiedliche Zwecke geeignet sind. In diesem Kapitel werden die wichtigsten Diagrammtypen vorgestellt und ihre Anwendungsfälle erklärt.\n\n## 1. Liniendiagramme (`plt.plot()`)\nLiniendiagramme eignen sich hervorragend zur Darstellung von Trends über Zeit.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('Liniendiagramm')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-2-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 2. Streudiagramme (`plt.scatter()`)\nStreudiagramme werden verwendet, um Zusammenhänge zwischen zwei Variablen darzustellen.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nx = np.random.rand(50)\ny = np.random.rand(50)\n\nplt.scatter(x, y, color='r', alpha=0.5)\nplt.xlabel('Variable X')\nplt.ylabel('Variable Y')\nplt.title('Streudiagramm')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-3-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 3. Balkendiagramme (`plt.bar()`)\nBalkendiagramme eignen sich zur Darstellung kategorialer Daten.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nkategorien = ['A', 'B', 'C', 'D']\nwerte = [3, 7, 1, 5]\n\nplt.bar(kategorien, werte, color='g')\nplt.xlabel('Kategorien')\nplt.ylabel('Wert')\nplt.title('Balkendiagramm')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-4-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 4. Histogramme (`plt.hist()`)\nHistogramme zeigen die Verteilung numerischer Daten.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndaten = np.random.randn(1000)\nplt.hist(daten, bins=30, color='purple', alpha=0.7)\nplt.xlabel('Wert')\nplt.ylabel('Häufigkeit')\nplt.title('Histogramm')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-5-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 5. Boxplots (`plt.boxplot()`)\nBoxplots helfen, Ausreißer und die Verteilung von Daten zu visualisieren.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndaten = [np.random.randn(100) for _ in range(4)]\nplt.boxplot(daten, labels=['A', 'B', 'C', 'D'])\nplt.ylabel('Wert')\nplt.title('Boxplot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_4461/2728911591.py:2: MatplotlibDeprecationWarning: The 'labels' parameter of boxplot() has been renamed 'tick_labels' since Matplotlib 3.9; support for the old name will be dropped in 3.11.\n  plt.boxplot(daten, labels=['A', 'B', 'C', 'D'])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-6-output-2.png){fig-pos='H'}\n:::\n:::\n\n\n## 6. Heatmaps (`plt.imshow()`)\nHeatmaps eignen sich zur Darstellung von 2D-Daten.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndaten = np.random.rand(10, 10)\nplt.imshow(daten, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\nplt.title('Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](basic_plot_types_files/figure-pdf/cell-7-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## Fazit\nDie Wahl des richtigen Diagrammtyps hängt von der Art der Daten und der gewünschten Darstellung ab. Im nächsten Kapitel werden wir uns mit der Anpassung und Gestaltung von Plots beschäftigen.\n\n",
    "supporting": [
      "basic_plot_types_files/figure-pdf"
    ],
    "filters": []
  }
}