{
  "hash": "706d0b368f5d8159e199b9645fe9dcda",
  "result": {
    "engine": "jupyter",
    "markdown": "# Erweiterte Techniken in Matplotlib\n\nIn diesem Kapitel betrachten wir einige fortgeschrittene Funktionen von Matplotlib, die für die wissenschaftliche Datenvisualisierung besonders nützlich sind.\n\n## 1. Logarithmische Skalen\nLogarithmische Skalen werden oft verwendet, wenn Werte große Größenordnungen umfassen.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.logspace(0.1, 2, 100)\ny = np.log10(x)\n\nplt.plot(x, y, label='log10(x)', color='b')\nplt.xscale('log')\nplt.xlabel('X-Wert (log-Skala)')\nplt.ylabel('Y-Wert')\nplt.title('Logarithmische Skalierung')\nplt.legend()\nplt.grid(True, which='both', linestyle='--', alpha=0.7)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](advanced_techniques_files/figure-pdf/cell-2-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 2. Twin-Achsen für verschiedene Skalierungen\nManchmal möchte man zwei verschiedene y-Achsen in einem Plot darstellen.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.exp(x / 3)\n\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.plot(x, y1, 'g-', label='sin(x)')\nax2.plot(x, y2, 'b--', label='exp(x/3)')\n\nax1.set_xlabel('X-Wert')\nax1.set_ylabel('Sinus', color='g')\nax2.set_ylabel('Exponentiell', color='b')\nax1.set_title('Twin-Achsen für unterschiedliche Skalierungen')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](advanced_techniques_files/figure-pdf/cell-3-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## 3. Annotationen in Diagrammen\nWichtige Punkte oder Werte in einem Diagramm können mit Annotationen hervorgehoben werden.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y, label='sin(x)')\nplt.xlabel('X-Wert')\nplt.ylabel('Amplitude')\nplt.title('Annotationen in Matplotlib')\nplt.annotate('Maximalwert', xy=(np.pi/2, 1), xytext=(2, 1.2),\n             arrowprops=dict(facecolor='red', shrink=0.05))\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](advanced_techniques_files/figure-pdf/cell-4-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n## Fazit\nDiese erweiterten Funktionen helfen dabei, wissenschaftliche Plots noch informativer zu gestalten. Im nächsten Kapitel werden wir Best Practices und typische Fehler in der wissenschaftlichen Visualisierung betrachten.\n\n",
    "supporting": [
      "advanced_techniques_files/figure-pdf"
    ],
    "filters": []
  }
}